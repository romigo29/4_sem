2. Механизм работы Middleware:
- клиент отправляет GET /aspnetcore, запрос проходит через конвейер обработки middleware
- Middleware перехватывает GET-запрос и возвращает встроенную приветственную html-страницу
- Код не доходит до MapGet, так как Middleware уже обработал запрос 
3. Создаем папку wwwroot и помещаем туда все необходимые файлы и папки
6. Вписать название сайта в адресную строку бразуера после запуска приложения
https://localhost:7131/jpg/Neumann.jpg
15. Паттерн Builder используется для создания и настройки и веб-приложения. Используется в самом начале приложения
16. Паттерн Chain of Responsibility (Цепочка обязанностей) позволяет передавать запрос по цепочке обработчиков, где каждый обработчик либо обрабатывает запрос, либо передает его дальше.
Этот паттерн позволяет избежать жесткой привязки отправителя запроса к его получателю. 
Используется я Middleware
17. Middleware (промежуточное ПО) — это компонент в ASP.NET Core, который обрабатывает HTTP-запрос и/или передает его дальше по конвейеру обработки
18. Статические файлы – это файлы, которые не обрабатываются сервером, а просто отдаются клиенту как есть.
19. Отличительный признак Middleware - app.UseXXXXX() – имена Middleware-элнмент:  app.UseHttpLogging().   
20. UseHTTPLogging, UseDefaultFiles - UseStaticFiles, UseWelcomePage
21. wwwroot - имя директория ASPA (по умолчанию), применяемого для хранения статических файлов приложения.   
22. Джон фон Нейман — выдающийся венгерско-американский математик, физик и компьютерный ученый
Джон фон Нейман — основоположник современной вычислительной техники.
Работал над ENIAC и EDVAC, первыми программируемыми компьютерами.
Он предложил принцип хранимой программы, где данные и код хранятся в одной памяти.